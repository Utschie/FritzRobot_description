<launch>
  <!-- 首先定义robot_description这个参数，然后使用xacro包里的xacro程序解析本包里的xacro文件
  于是参数服务器李有了一个名为robot_description的参数，其类型为string，其解析后的文件以urdf字符串的形式在参数中存储-->
  
 
  <!-- 设置launch文件的参数 -->
    <arg name="map" default="cloister_gmapping.yaml" />
    <arg name="map_file" default="$(find fritzrobot_control)/src/nav/maps/$(arg map)" />
    <arg name="model" default="$(find xacro)/xacro '$(find fritzrobot_description)/xacro/mini_mec.xacro'"/>
  <!--机器人模型的起点放置位置xyz坐标-->
  <arg name="x_pos" default="1.0"/>
  <arg name="y_pos" default="0.0"/>
  <arg name="z_pos" default="0.0"/>
  <arg name="roll" default="0.0"/>
  <arg name="pitch" default="0.0"/>
  <arg name="yaw" default="0.0"/>

  <node name="map_server" pkg="map_server" type="map_server" args="$(arg map_file)"/>

  <param name="robot_description" command="$(arg model)" />
  <!--必须要添加关节状态发布节点-->
  <node pkg="joint_state_publisher" type="joint_state_publisher" name="joint_state_publisher" output="screen"/>
  <!-- 必须添加机器人状态发布节点 -->
  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher" output="screen"/>
  <!-- 对于虚拟定位，需要设置一个/odom与/map之间的静态坐标变换 -->
  <node pkg="tf" type="static_transform_publisher" name="map_odom_broadcaster" args="0 0 0 0 0 0 /map /odom 100" />

  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" args="-urdf -model fritzrobot -param robot_description -x $(arg x_pos) -y $(arg y_pos) -z $(arg z_pos) -R $(arg roll) -P $(arg pitch) -Y $(arg yaw)"/>
  <node pkg="rviz" type="rviz" name="rviz" args="-d $(find fritzrobot_description)/configs/show_robot.rviz" required="true"/>
  
  

</launch>
